name: CI
on:
  push:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '20.19.0'
  PNPM_VERSION: '10.12.1'

jobs:
  # Shared quality checks that must pass first
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Verify Node version
        run: node -v | grep -q "v20.19" || exit 1

      - run: pnpm install --frozen-lockfile

      # Quality checks in parallel (40 seconds)
      - name: Run quality checks
        run: |
          pnpm lint &
          pnpm tsc --noEmit &
          pnpm audit --audit-level=critical &
          wait

      - name: Validate production environment variables
        run: |
          # Install vercel CLI for env validation
          npm install -g vercel

          # Check env vars are set (script validates both Vercel and Convex)
          ./scripts/validate-env-vars.sh production
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

      - name: Check for .only in tests
        run: |
          if git grep -E "(describe|test|it)\.only" "*.test.{ts,tsx}"; then
            echo "ERROR: Found .only in test files"
            echo "Remove .only before committing"
            exit 1
          fi

  # Test job - runs in parallel with build
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: quality # Only run after quality checks pass
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test:ci

      - name: Coverage Report
        if: github.event_name == 'pull_request'
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          json-summary-path: ./coverage/coverage-summary.json
          json-final-path: ./coverage/coverage-final.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Build job - runs in parallel with test
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: quality # Only run after quality checks pass
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      - name: Validate deployment health
        run: ./scripts/check-deployment-health.sh
        env:
          NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}

      - name: Check bundle size
        run: pnpm size-limit
